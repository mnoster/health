{"fileName":"/contracts/Health.sol","name":"Health","abi":[{"constant":true,"inputs":[{"name":"pubKey","type":"address"}],"name":"isRegisteredOrganization","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"company","type":"bytes32"}],"name":"isRegisteredOrganizationCompany","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"companies","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"organizationCompany","type":"string"}],"name":"getOrganizationFromCompany","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"company","type":"bytes32"},{"name":"pubKey","type":"address"}],"name":"updateOrganizations","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"}],"name":"addMedicine","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"}],"name":"removeMedicine","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hashes","type":"bytes32[]"}],"name":"addMedicines","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"organizations","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"timestamp","type":"uint256"},{"name":"pubKey","type":"address"},{"name":"location","type":"string"},{"name":"medType","type":"string"},{"name":"optional","type":"string"}],"name":"doesRecordExistForCompany","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"hashes","type":"bytes32[]"}],"name":"removeMedicines","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"company","type":"bytes32"}],"name":"deregisterOrganization","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"company","type":"bytes32"},{"name":"pubKey","type":"address"}],"name":"registerOrganization","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"name":"medicines","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"source":"pragma solidity ^0.4.4;\n\n\ncontract Health {\n\n  /**\n   * @notice a mapping of companies to organization public keys\n   *\n   * @example\n   * \"Health Net\" -> \"0x9L1m03nl0Pc5ns4kh2KL2m\"\n   * organizations[companyHash] = Public Key\n   */\n  mapping (bytes32 => address) public organizations;\n\n  /**\n   * @notice a mapping of organization public keys and companyHash to companies\n   *\n   * @example\n   * \"0x123...abc\" -> \"nytimes.com\"\n   */\n  mapping (address => bytes32) public companies;\n\n   /**\n    * @notice a mapping of publsher companies to\n    * their hashes of authorized Medicines\n    *\n    * @example example\n    * Medicines[keccak256(company)][MedicineHash] -> MedicineHash\n    */\n  mapping (bytes32 => mapping (bytes32 => bytes32)) public medicines;\n\n  /**\n   * @notice The owner of this contract.\n   */\n  address public owner;\n\n  /**\n   * Events, when triggered, record logs in the blockchain.\n   * Clients can listen on specific events to fetch data.\n   */\n  // event _OrganizationRegistered(bytes32 indexed organizationCompany, address indexed organizationKey);\n  // event _OrganizationUpdated(bytes32 indexed organizationCompany, address indexed organizationKey);\n  // event _OrganizationDeregistered(bytes32 indexed organizationCompany, address indexed organizationKey);\n  // event _MedicineAdded(bytes32 indexed organizationCompany, bytes32 indexed medicineHash);\n  // event _MedicineRemoved(bytes32 indexed organizationCompany, bytes32 indexed medicineHash);\n\n  /**\n   * @notice modifier which limits execution\n   * of the function to the owner.\n   */\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      revert();\n    }\n\n    // continue with code execution\n    _;\n  }\n\n  /**\n   * @notice modifier which checks if sender is\n   * a registered organization.\n   */\n  modifier isRegistered() {\n    if (companies[msg.sender] == 0) {\n      revert();\n    }\n\n    // continue with code execution\n    _;\n  }\n\n  /**\n   * @notice modifier which checks that\n   * organization doesn't exist.\n   */\n  modifier organizationDoesNotExist(address pubKey) {\n    if (companies[pubKey] != 0) {\n      revert();\n    }\n\n    _;\n  }\n\n  /*\n   * @notice The constructor function,\n   * called only once when this contract is initially deployed.\n   */\n  function Health() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @notice Change owner of contract.\n   * @param newOwner new owner address\n   */\n  function changeOwner(address newOwner) onlyOwner external {\n    owner = newOwner;\n  }\n\n  /**\n   * @notice Register new organization.\n   * Only the owner of the contract can register new organizations.\n   * organization public key must not already exist in order to\n   * be added or modified.\n   * @param company pubisher companies\n   * @param pubKey pubisher public key\n   */\n  function registerOrganization(bytes32 company, address pubKey) onlyOwner organizationDoesNotExist(pubKey) external {\n    organizations[keccak256(company)] = pubKey;\n    companies[pubKey] = company;\n    //_organizationRegistered(company, pubKey);\n  }\n\n  /**\n   * @notice Update new organization.\n   * Only the owner of the contract can update organizations.\n   * organization public key must already exist in order to\n   * be modified.\n   * @param company pubisher companies\n   * @param pubKey pubisher public key\n   */\n  function updateOrganizations(bytes32 company, address pubKey) onlyOwner external {\n    bytes32 companyHash = keccak256(company);\n    require(organizations[companyHash] != address(0));\n\n    // remove old organization key\n    address oldPubKey = organizations[companyHash];\n    delete companies[oldPubKey];\n\n    // Update organization pubKey \n    organizations[companyHash] = pubKey;\n    companies[pubKey] = company;\n\n   // _OrganizationUpdated(company, pubKey);\n  }\n\n  /**\n   * @notice Deregister existing organization.\n   * Only contract owner is allowed to deregister.\n   * @param company  public key\n   */\n  function deregisterOrganization(bytes32 company) onlyOwner external {\n    bytes32 companyHash = keccak256(company);\n    address pubKey = organizations[companyHash];\n    require(organizations[companyHash] != address(0));\n    // order matters here, delete pub from map first.\n    delete organizations[companyHash];\n    delete companies[pubKey];\n\n   // _OrganizationDeregistered(companies[pubKey], pubKey);\n  }\n\n  /**\n   * @notice Allow organization to add a Medicine by the hash of the Medicine information.\n   * @param hash keccak256 hash of Medicine information\n   */\n  function addMedicine(bytes32 hash) isRegistered public {\n    medicines[keccak256(companies[msg.sender])][hash] = hash;\n   //_MedicineAdded(companies[msg.sender], hash);\n  }\n\n  /**\n   * @notice Allow organization to add multiple Medicines by providing an array of hashes of the Medicine information.\n   * @param hashes an array of hashes of Medicine information\n   */\n  function addMedicines(bytes32[] hashes) isRegistered public {\n    for (uint256 i = 0; i < hashes.length; i++) {\n      addMedicine(hashes[i]);\n    }\n  }\n\n  /**\n   * @notice Remove Medicine from organization\n   * @param hash keccak256 hash of Medicine information\n   */\n  function removeMedicine(bytes32 hash) isRegistered public {\n    delete medicines[keccak256(companies[msg.sender])][hash];\n   // _MedicineRemoved(companies[msg.sender], hash);\n  }\n\n  /**\n   * @notice Allow organization to remove multiple Medicines by providing an array of hashes of the Medicine information.\n   * @param hashes an array of hashes of the Medicine information\n   */\n  function removeMedicines(bytes32[] hashes) isRegistered public {\n    for (uint256 i = 0; i < hashes.length; i++) {\n      removeMedicine(hashes[i]);\n    }\n  }\n\n  /**\n    * @notice Get organization public key from companies name\n    * @param organizationCompany companies of organization\n    * @return organization public key\n    */\n  function getOrganizationFromCompany(string organizationCompany) public constant returns (address) {\n    return organizations[keccak256(organizationCompany)];\n  }\n\n  /**\n   * @notice Check if organization is registered.\n   * @param pubKey organization public key\n   * @return bool\n   */\n  function isRegisteredOrganization(address pubKey) external constant returns (bool) {\n    return (companies[pubKey] != \"\");\n  }\n\n  /**\n   * @notice Check if Organization is registered by companies\n   * @param company pubisher companies\n   * @return bool\n   */\n  function isRegisteredOrganizationCompany(bytes32 company) external constant returns (bool) {\n    return (organizations[keccak256(company)] != address(0));\n  }\n\n  /**\n   * @notice Return true if is Medicine for Organization\n   * @param pubKey organization public key\n   * @param timestamp companies of Medicine\n   * @param medType associated with Medicine or reMedicine in advertising system \n   * @param location Relationship of Medicine. (Direct: 0, ReMedicine: 1)\n   * @param optional Optional Params (tagId, format, region)\n   * @return boolean\n   */\n  function doesRecordExistForCompany(\n    uint timestamp,\n    address pubKey,\n    string location,\n    string medType,\n    string optional\n  )\n  external\n  constant\n  returns (bool) \n  {\n    bytes32 hash = keccak256(timestamp, location, medType, optional);\n    return (medicines[keccak256(companies[pubKey])][hash] != \"\");\n  }\n}\n\n","abiDocs":[{"constant":true,"inputs":[{"name":"pubKey","type":"address","description":"organization public key"}],"name":"isRegisteredOrganization","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"bool","notice":"Check if organization is registered.","signature":"isRegisteredOrganization(address)","signatureHash":"0c424672"},{"constant":true,"inputs":[{"name":"company","type":"bytes32","description":"pubisher companies"}],"name":"isRegisteredOrganizationCompany","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"bool","notice":"Check if Organization is registered by companies","signature":"isRegisteredOrganizationCompany(bytes32)","signatureHash":"21a3727f"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"companies","payable":false,"stateMutability":"view","type":"function","signature":"companies(address)","signatureHash":"355e6ce8"},{"constant":true,"inputs":[{"name":"organizationCompany","type":"string","description":"companies of organization"}],"name":"getOrganizationFromCompany","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function","return":"organization public key","notice":"Get organization public key from companies name","signature":"getOrganizationFromCompany(string)","signatureHash":"7e770fe1"},{"constant":false,"inputs":[{"name":"company","type":"bytes32","description":"pubisher companies"},{"name":"pubKey","type":"address","description":"pubisher public key"}],"name":"updateOrganizations","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Update new organization. Only the owner of the contract can update organizations. organization public key must already exist in order to be modified.","signature":"updateOrganizations(bytes32,address)","signatureHash":"881e938e"},{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32","description":"keccak256 hash of Medicine information"}],"name":"addMedicine","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Allow organization to add a Medicine by the hash of the Medicine information.","signature":"addMedicine(bytes32)","signatureHash":"9905c67e"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32","description":"keccak256 hash of Medicine information"}],"name":"removeMedicine","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Remove Medicine from organization","signature":"removeMedicine(bytes32)","signatureHash":"9f0b5dfa"},{"constant":false,"inputs":[{"name":"newOwner","type":"address","description":"new owner address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Change owner of contract.","signature":"changeOwner(address)","signatureHash":"a6f9dae1"},{"constant":false,"inputs":[{"name":"hashes","type":"bytes32[]","description":"an array of hashes of Medicine information"}],"name":"addMedicines","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Allow organization to add multiple Medicines by providing an array of hashes of the Medicine information.","signature":"addMedicines(bytes32[])","signatureHash":"b1ed556d"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"organizations","payable":false,"stateMutability":"view","type":"function","signature":"organizations(bytes32)","signatureHash":"ba51b14e"},{"constant":true,"inputs":[{"name":"timestamp","type":"uint256","description":"companies of Medicine"},{"name":"pubKey","type":"address","description":"organization public key"},{"name":"location","type":"string","description":"Relationship of Medicine. (Direct: 0, ReMedicine: 1)"},{"name":"medType","type":"string","description":"associated with Medicine or reMedicine in advertising system "},{"name":"optional","type":"string","description":"Optional Params (tagId, format, region)"}],"name":"doesRecordExistForCompany","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"boolean","notice":"Return true if is Medicine for Organization","signature":"doesRecordExistForCompany(uint256,address,string,string,string)","signatureHash":"bf6242b0"},{"constant":false,"inputs":[{"name":"hashes","type":"bytes32[]","description":"an array of hashes of the Medicine information"}],"name":"removeMedicines","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Allow organization to remove multiple Medicines by providing an array of hashes of the Medicine information.","signature":"removeMedicines(bytes32[])","signatureHash":"d503f500"},{"constant":false,"inputs":[{"name":"company","type":"bytes32","description":"public key"}],"name":"deregisterOrganization","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Deregister existing organization. Only contract owner is allowed to deregister.","signature":"deregisterOrganization(bytes32)","signatureHash":"de9e3f05"},{"constant":false,"inputs":[{"name":"company","type":"bytes32","description":"pubisher companies"},{"name":"pubKey","type":"address","description":"pubisher public key"}],"name":"registerOrganization","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Register new organization. Only the owner of the contract can register new organizations. organization public key must not already exist in order to be added or modified.","signature":"registerOrganization(bytes32,address)","signatureHash":"e93bb527"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"name":"medicines","payable":false,"stateMutability":"view","type":"function","signature":"medicines(bytes32,bytes32)","signatureHash":"edd2d3e6"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]}
